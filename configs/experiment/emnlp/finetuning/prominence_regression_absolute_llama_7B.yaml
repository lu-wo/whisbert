# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - override /data: prominence_regression.yaml
  - override /model_task: token_tagging_regressor_llama_mle.yaml
  - override /callbacks: prominence_regression.yaml
  - override /logger: many_loggers.yaml
  - override /trainer: ddp.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags: ["llama-7b", "prominence", "regression", "relative_prev"]

seed: 12345

logger:
  wandb:
    project: EMNLP-prominence-relative-prev
    entity: prosody
    tags: ["llama-7b", "prominence", "regression", "relative_prev"]
    name: "run-${now:%Y-%m-%d_%H-%M-%S}"
    group: "llama-7b" # Add this line to override the 'group' parameter
    log_model: False # Add this line to override the 'log_model' parameter

trainer:
  min_epochs: 1
  max_epochs: 25
  gradient_clip_val: 1
  precision: 16-mixed # mixed precision for less memory 
  accumulate_grad_batches: 32 # accumulate gradient over k batches to have larger effective batch size (trade computation for memory)

  devices: 2 # number of gpus to use

model_task:
  huggingface_model: llama-7b
  num_labels: 1
  optimizer:
    lr: 0.00005
    weight_decay: 0.1
  scheduler:
    patience: 2
  # use_mlp: false 
  # freeze_lm: false
  # train_last_k_layers: 1

  llama_path: /nese/mit/group/evlab/u/luwo/projects/llms/llama/huggingface/7B

callbacks:
  early_stopping:
    patience: 3

data:
  model_name: llama-7b
  batch_size: 1
  dataset_name: helsinki_prominence
  data_dir: /nese/mit/group/evlab/u/luwo/projects/prosody/prosody/repositories/helsinki-prosody/data
  train_file: train_360.txt
  val_file: dev.txt
  test_file: test.txt
  score_last_token: true # only score the first token of a word in loss
  debug: false

  llama_tokenizer_path: /nese/mit/group/evlab/u/luwo/projects/llms/llama/huggingface/7B
